--------------------------------------------------------------
--------------------------------------------------------------
--                                                          --
-- This VHDL file has been generated by the verilog2vhdl    --
-- tool.                                                    --
-- Contact help@edautils.com  for support/info.--
--                                                          --
--                                                          --
--------------------------------------------------------------
--------------------------------------------------------------
--
--
-- Assumptions: 
--         (1) All the parameters are of type INTEGER, and hence the translated generics are of this type
--
--
-- Generated by : Roger on 09/10/20 19:06
--
--
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
--use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity async_receiver_lellis is 
generic (
        ClkFrequency : INTEGER := 7372800 ;
        Baud : INTEGER := 38400 ;
        Baud8 : INTEGER := 307200 ;
        Baud8GeneratorAccWidth : INTEGER := 16 
    );
     port (
        clk :  in std_logic;
        RxD :  in std_logic;
        RxD_data_ready :  out std_logic;
        RxD_data_error :  out std_logic;
        RxD_data :  buffer std_logic_vector(7 downto 0);
        RxD_endofpacket :  out std_logic;
        RxD_idle :  out std_logic
    );
end entity; 


architecture rtl of async_receiver_lellis is 
    --signal Baud8GeneratorInc : std_logic_vector(Baud8GeneratorAccWidth downto 0) := (((Baud8 sll ( Baud8GeneratorAccWidth - 7)) + (ClkFrequency srl 8))/(ClkFrequency srl 7)) ;
    signal Baud8GeneratorInc : std_logic_vector(Baud8GeneratorAccWidth downto 0) := "00000101010101011";
    signal Baud8GeneratorAcc : std_logic_vector(Baud8GeneratorAccWidth downto 0) := (others => '0');
    signal Baud8Tick : std_logic;
    signal RxD_sync_inv : std_logic_vector(1 downto 0) := "00";
    signal RxD_cnt_inv : std_logic_vector(1 downto 0) := "00";
    signal RxD_bit_inv : std_logic := '0';
    signal state : std_logic_vector(3 downto 0);
    signal bit_spacing : std_logic_vector(3 downto 0) := "0000";
    --signal next_bit : std_logic := ( bit_spacing = B"1010"  ) ;
    signal next_bit : std_logic;
    signal gap_count : std_logic_vector(4 downto 0) := "00000";
    begin 
    
    Baud8Tick <= Baud8GeneratorAcc(Baud8GeneratorAccWidth);
    
    next_bit <= '1' when (bit_spacing = "1010") 
	                else '0';
						  
    process 
        begin
            wait until (clk'EVENT and (clk = '1')) ;
            --Baud8GeneratorAcc <= ( Baud8GeneratorAcc(( Baud8GeneratorAccWidth - 1  )  downto 0 ) + Baud8GeneratorInc ) ;
	    Baud8GeneratorAcc <= '0'& Baud8GeneratorAcc(Baud8GeneratorAccWidth - 1 downto 0) + Baud8GeneratorInc;
        end process;
  
        process 
			begin
				wait until (clk'EVENT and (clk = '1'));
				if ( Baud8Tick = '1' ) then 
					RxD_sync_inv <= (RxD_sync_inv(0) & ( not RxD));
				end if;
        end process;
 
		process 
			begin
				wait until (clk'EVENT and ( clk = '1')) ;
					if (Baud8Tick = '1') then 
						if( RxD_sync_inv(1)='1') then
							if (RxD_cnt_inv/="11") then
								RxD_cnt_inv <= RxD_cnt_inv + "01";
							end if;
						else if (RxD_sync_inv(1)='0') then
								if(RxD_cnt_inv/="00") then
									RxD_cnt_inv <= RxD_cnt_inv - "01";
								end if;
							end if;
						end if;

						if(RxD_cnt_inv="00") then
							RxD_bit_inv <= '0';
						else if (RxD_cnt_inv="11") then
							RxD_bit_inv <= '1';
							end if;
						end if;
					end if;
        end process;
				  
        process
        begin
            wait until (clk'EVENT and (clk = '1'));
            if ((state = "0000")) then 
                bit_spacing <= B"0000";
	    elsif (Baud8Tick = '1') then 
                bit_spacing <= (((bit_spacing(2 downto 0) + B"0001")) or (bit_spacing(3) & B"000"));
            end if;
        end process;
		
        process
			begin
				wait until (clk'EVENT and (clk = '1'));
				if (Baud8Tick = '1') then 
					case (state) is 
						when 
							B"0000"  => 
							if (RxD_bit_inv = '1') then 
								state <= B"1000" ;
							end if;
						when 
							B"1000"  => 
							if (next_bit = '1') then 
								state <= B"1001" ;
							end if;
						when 
							B"1001"  => 
							if (next_bit = '1') then 
								state <= B"1010" ;
							end if;
						when 
							B"1010"  => 
							if (next_bit = '1') then 
								state <= B"1011" ;
							end if;
						when 
							B"1011"  => 
							if (next_bit = '1') then 
								state <= B"1100" ;
							end if;
						when 
							B"1100"  => 
							if (next_bit = '1') then 
								state <= B"1101" ;
							end if;
						when 
							B"1101"  => 
							if (next_bit = '1') then 
								state <= B"1110" ;
							end if;
						when 
							B"1110"  => 
							if (next_bit = '1') then 
								state <= B"1111" ;
							end if;
						when 
							B"1111"  => 
							if (next_bit = '1') then 
								state <= B"0001" ;
							end if;
						when 
							B"0001"  => 
							if (next_bit = '1') then 
								state <= B"0000" ;
							end if;
						when 
							 others  => 
							state <= B"0000" ;
					end case;
				end if;
        end process;
				  
        process 
			begin
				wait until (clk'EVENT and (clk = '1'));
				if (((Baud8Tick='1' and next_bit='1')  and state(3)='1')) then 
					RxD_data <= ((not RxD_bit_inv) & RxD_data(7 downto 1));
				end if;
		end process;
		
		process 
			begin
				wait until (clk'EVENT and (clk = '1'));
					if (state=B"0001") then
						RxD_data_ready <= (Baud8Tick and next_bit and (not RxD_bit_inv));
						RxD_data_error <= (Baud8Tick and next_bit and RxD_bit_inv);
					else
						RxD_data_ready <= '0';
						RxD_data_error <= '0';
					end if;
        end process;
		
        process
			begin
				wait until (clk'EVENT and (clk = '1'));
				if ((state /= 0)) then 
					gap_count <= "00000" ;
				elsif ((Baud8Tick='1' and (not gap_count(4)='1'))) then 
						gap_count <= (gap_count + "00001") ;
				end if;
        end process;
		
        RxD_idle <= gap_count(4);
		
        process
			begin
				wait until (clk'EVENT and (clk = '1'));
					if (gap_count = X"0F") then
						RxD_endofpacket <= Baud8Tick;
					else
						RxD_endofpacket <= '0';
					end if;
        end process;
end rtl; 


